version: '3.8'
services:

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - backend

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    networks:
      - backend
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: monitoring_grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    links:
      - prometheus:prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SMTP_USER=admin@gmail.com
      - GF_SMTP_PASSWORD=admin
    networks:
      - backend

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD: "pwd123"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "alison.inoue@gmail.com"
      PGADMIN_DEFAULT_PASSWORD: "pwd123"
    ports:
      - "16543:80"
    depends_on:
      - postgres
    networks:
      - backend

  splunkenterprise:
    #build: .
    hostname: splunkenterprise
    image: splunk/splunk:latest
    environment:
      SPLUNK_START_ARGS: --accept-license
      SPLUNK_ENABLE_LISTEN: 9997
      SPLUNK_ADD: tcp 1514
      SPLUNK_PASSWORD: Pwd1234@@
    volumes:
      - opt-splunk-etc:/opt/splunk/etc
      - opt-splunk-var:/opt/splunk/var
    ports:
      - "8000:8000"
      - "9997:9997"
      - "8088:8088"
      - "1514:1514"
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.0
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  broker:
    image: confluentinc/cp-server:6.1.0
    hostname: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - backend

  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.0
    hostname: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - backend

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.1.0
    hostname: control-center
    depends_on:
      - broker
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - backend

#  app:
#    build: .
#    image: app:1.0
#    ports:
#      - "8080:8080"
#      - "50051:50051"
#    depends_on:
#      - postgres
#      - splunkenterprise
#    environment:
#      JDBC_URL: jdbc:postgresql://postgres:5432/postgres
#      JDBC_USER: postgres
#      JDBC_PASSWORD: pwd123
#      JDBC_DRIVER: org.postgresql.Driver
#      JAEGER_HOST: jaeger
#      JAEGER_PORT: 6831
#      SERVER_PORT: 8080
#      GRPC_PORT: 50051
#      KAFKA_BOOTSTRAP_SERVERS: broker:29092
#      KAFKA_SCHEMA_REGISTRY: http://schema-registry:8081
#    logging:
#      driver: splunk
#      options:
#        splunk-token: "55069026-1a84-4d80-88d5-12239d063f9a"
#        splunk-url: "https://localhost:8088"
#        splunk-insecureskipverify: "true"
#        splunk-format: raw
#        tag: "{{.ImageName}}/{{.Name}}/{{.ID}}"
#        labels: "AppTeste"
#    networks:
#      - backend

#curl -k https://localhost:8088/services/collector/event/1.0 -H "Authorization: 55069026-1a84-4d80-88d5-12239d063f9a" -d '{"event": "hello world"}'

volumes:
  prometheus_data:
  grafana_data:
  postgres_data:
  opt-splunk-etc:
  opt-splunk-var:

networks:
  backend: