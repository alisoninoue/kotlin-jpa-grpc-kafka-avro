micronaut:
  server:
    port: ${SERVER_PORT:`8080`}
  application:
    name: poc
  metrics:
    enabled: true
    export:
      prometheus:
        enabled: true
        step: PT1M
    descriptions: true
endpoints:
  metrics:
    enabled: true
    sensitive: false
  prometheus:
    sensitive: false
  health:
    enabled: true
    details-visible: anonymous
tracing:
  jaeger:
    enabled: true
    sampler:
      probability: 1
    sender:
      agent-host: ${JAEGER_HOST:`localhost`}
      agent-port: ${JAEGER_PORT:`6831`}
grpc:
  server:
    health:
      enabled: true
    port: ${GRPC_PORT:`50051`}

datasources:
  default:
    url: ${JDBC_URL:`jdbc:postgresql://localhost:5432/postgres`}
    username: ${JDBC_USER:postgres}
    password: ${JDBC_PASSWORD:pwd123}
    driverClassName: ${JDBC_DRIVER:org.postgresql.Driver}
jpa:
  default:
    entity-scan:
      packages: 'br.com.poc.adapters.persistence.entities'
    properties:
      hibernate:
        hbm2ddl:
          auto: update
        show_sql: true

kafka:
  bootstrap:
    servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
  schema.registry.url: ${KAFKA_SCHEMA_REGISTRY:http://localhost:8081}
  consumers:
    default:
      specific.avro.reader: true
      enable.auto.commit: false
      key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  producers:
    default:
      key.serializer: org.apache.kafka.common.serialization.StringSerializer
      value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
